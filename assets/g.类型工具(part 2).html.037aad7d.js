import{_ as o,r as c,o as l,a as r,d as s,e,w as t,F as i,b as a,f as n}from"./app.28445bf9.js";const u={},k=a(`<h1 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h1><h2 id="\u7C7B\u578B\u67E5\u8BE2\u64CD\u4F5C\u7B26-\u719F\u6089\u53C8\u964C\u751F\u7684-typeof" tabindex="-1"><a class="header-anchor" href="#\u7C7B\u578B\u67E5\u8BE2\u64CD\u4F5C\u7B26-\u719F\u6089\u53C8\u964C\u751F\u7684-typeof" aria-hidden="true">#</a> \u7C7B\u578B\u67E5\u8BE2\u64CD\u4F5C\u7B26: \u719F\u6089\u53C8\u964C\u751F\u7684 typeof</h2><p>typescript \u4E2D\u5B58\u5728\u4E24\u79CD\u529F\u80FD\u4E0D\u540C\u7684 <code>typeof</code> \u64CD\u4F5C\u7B26\uFF0C\u6211\u4EEC\u6700\u5E38\u89C1\u7684\u4E00\u79CD\u662F\u5B58\u5728 javascript \u4E2D, \u7528\u4E8E\u68C0\u67E5\u7C7B\u578B\u7684 typeof, \u5B83\u4F1A\u8FD4\u56DE <code>string</code> / <code>number</code> / <code>object</code> / <code>undefined</code> \u7B49\u503C\u3002 \u800C\u9664\u6B64\u4E4B\u5916\uFF0C typescript \u8FD8\u65B0\u589E\u4E86\u7528\u4E8E\u7C7B\u578B\u67E5\u8BE2\u7684 typeof, \u5373 <strong>Type Query Operator</strong>, \u8FD9\u4E2A typeof \u8FD4\u56DE\u7684\u662F typescript \u7684\u7C7B\u578B\u3002</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;cqc&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;cqc&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> nullVar <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> undefinedVar <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">func</span> <span class="token operator">=</span> <span class="token punctuation">(</span>input<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> input<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">Str</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> str<span class="token punctuation">;</span> <span class="token comment">// &#39;cqc&#39;</span>
<span class="token keyword">type</span> <span class="token class-name">Obj</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">;</span> <span class="token comment">// { name: string }</span>

<span class="token keyword">type</span> <span class="token class-name">Null</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> nullVar<span class="token punctuation">;</span> <span class="token comment">// null</span>
<span class="token keyword">type</span> <span class="token class-name">Undefined</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> undefinedVar<span class="token punctuation">;</span> <span class="token comment">// undefined</span>

<span class="token keyword">type</span> <span class="token class-name">Func</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> func<span class="token punctuation">;</span> <span class="token comment">// (input: string) =&gt; boolean</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>\u4F60\u4E0D\u4EC5\u53EF\u4EE5\u76F4\u63A5\u5728\u7C7B\u578B\u6807\u6CE8\u4E2D\u4F7F\u7528 typeof\uFF0C\u8FD8\u80FD\u5728\u5DE5\u5177\u7C7B\u578B\u4E2D\u4F7F\u7528 typeof;</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token function-variable function">func</span> <span class="token operator">=</span> <span class="token punctuation">(</span>input<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> input<span class="token punctuation">.</span>length<span class="token punctuation">;</span>

<span class="token keyword">const</span> func2<span class="token operator">:</span> <span class="token keyword">typeof</span> <span class="token function-variable function">func</span> <span class="token operator">=</span> <span class="token punctuation">(</span>input1<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> input1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">// \u5165\u53C2\u540D\u5B57\u53EF\u4EE5\u53D8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>\u7EDD\u5927\u591A\u6570\u60C5\u51B5\u4E0B\uFF0C typeof \u8FD4\u56DE\u7684\u7C7B\u578B\u5C31\u662F\u4F60\u628A\u9F20\u6807\u60AC\u6D6E\u5728\u53D8\u91CF\u540D\u4E0A\u7684\u81EA\u52A8\u63A8\u5BFC\u51FA\u7684\u7C7B\u578B\uFF0C \u5E76\u4E14\u662F<strong>\u6700\u7A84\u7684\u63A8\u5BFC\u7A0B\u5EA6\uFF08\u5373\u5230\u5B57\u9762\u91CF\u7C7B\u578B\u7EA7\u522B\uFF09</strong>\u3002</p><p>\u4F60\u4E5F\u4E0D\u7528\u62C5\u5FC3\u6DF7\u7528\u4E86\u8FD9\u4E24\u79CD typeof\uFF0C \u5728\u903B\u8F91\u4EE3\u7801\u4E2D\u4F7F\u7528\u7684 typeof \u4E00\u5B9A\u662F javascript \u4E2D\u7684 typeof\uFF0C \u800C\u7C7B\u578B\u4EE3\u7801(\u7C7B\u578B\u6807\u6CE8\u3001\u7C7B\u578B\u522B\u540D\u4E2D\u7B49) \u4E2D\u7684\u4E00\u5B9A\u662F\u7C7B\u578B\u67E5\u8BE2\u7684 typeof\u3002\u540C\u65F6\uFF0C \u4E3A\u4E86\u66F4\u597D\u7684\u907F\u514D\u8FD9\u79CD\u60C5\u51B5\uFF0C \u4E5F\u5C31\u662F\u9694\u79BB\u7C7B\u578B\u5C42\u548C\u903B\u8F91\u5C42\uFF0C\u7C7B\u578B\u67E5\u8BE2 typeof \u64CD\u4F5C\u7B26\u540E\u9762\u662F\u4E0D\u5141\u8BB8 \u4F7F\u7528\u8868\u8FBE\u5F0F\u7684\uFF1A</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token function-variable function">inputValid</span> <span class="token operator">=</span> <span class="token punctuation">(</span>input<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> input<span class="token punctuation">.</span>length<span class="token punctuation">;</span>

<span class="token keyword">let</span> isValid<span class="token operator">:</span> <span class="token keyword">typeof</span> <span class="token function">inputValid</span><span class="token punctuation">(</span><span class="token string">&#39;cqc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u4E0D\u5141\u8BB8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="\u7C7B\u578B\u5B88\u536B" tabindex="-1"><a class="header-anchor" href="#\u7C7B\u578B\u5B88\u536B" aria-hidden="true">#</a> \u7C7B\u578B\u5B88\u536B</h2><p>typescript \u4E2D\u63D0\u4F9B\u4E86\u975E\u5E38\u5F3A\u5927\u7684\u7C7B\u578B\u63A8\u5BFC\u80FD\u529B\uFF0C\u5B83\u4F1A\u968F\u7740\u4F60\u7684\u4EE3\u7801\u903B\u8F91\u800C\u5C1D\u8BD5\u4E0D\u65AD\u7684\u6536\u7A84\u7C7B\u578B\uFF0C \u8FD9\u4E00\u80FD\u529B\u79F0\u4E4B\u4E3A<strong>\u7C7B\u578B\u63A7\u5236\u6D41\u5206\u6790</strong> (\u4E5F\u7B80\u5355\u7406\u89E3\u4E3A\u7C7B\u578B\u63A8\u5BFC).</p><p>\u8FD9\u4E48\u8BF4\u6709\u7684\u62BD\u8C61\uFF0C\u6211\u4EEC\u53EF\u4EE5\u60F3\u8C61\u6709\u4E00\u6761\u6CB3\u6D41\uFF0C\u4ED6\u4ECE\u4E0A\u800C\u4E0B\u6D41\u8FC7\u4F60\u7684\u7A0B\u5E8F\uFF0C\u968F\u7740\u4EE3\u7801\u7684\u5206\u652F\u5206\u51FA\u4E00\u6761\u6761 \u652F\u6D41\uFF0C\u5728\u6700\u540E\u91CD\u65B0\u5408\u5E76\u4E3A\u4E00\u4E2A\u5B8C\u6574\u7684\u6CB3\u6D41. \u5728\u6CB3\u6D41\u6D41\u52A8\u7684\u8FC7\u7A0B\u4E2D\uFF0C\u5982\u679C\u9047\u5230\u4E86\u6709\u7279\u70B9\u6761\u4EF6\u624D\u4F1A\u8FDB\u5165\u652F\u5230 (\u6BD4\u5982 if else \u8BED\u53E5, switch case \u7B49), \u90A3\u8FD9\u6761\u652F\u6D41\u6D41\u8FC7\u8FD9\u91CC\u5C31\u4F1A\u6536\u96C6\u5BF9\u5E94\u7684\u4FE1\u606F\uFF0C\u7B49\u5230\u6700\u540E\u5408\u5E76\u65F6\uFF0C \u5B83\u4EEC\u5C31\u4F1A\u56B7\u7740\u4EA4\u6D41: &quot;\u6211\u521A\u521A\u6D41\u8FC7\u4E86\u4E00\u4E2A\u53EA\u6709\u5B57\u7B26\u4E32\u7C7B\u578B\u624D\u80FD\u8FDB\u5165\u7684\u4EE3\u7801\u5206\u652F!&quot; &quot;\u6211\u521A\u521A\u6D41\u8FDB\u4E86\u4E00\u4E2A\u53EA\u6709\u51FD\u6570 \u7C7B\u578B\u624D\u80FD\u8FDB\u5165\u7684\u4EE3\u7801\u5206\u652F!&quot; ... \u5C31\u8FD9\u6837\uFF0C\u5B83\u4F1A\u628A\u6574\u4E2A\u7A0B\u5E8F\u7684\u7C7B\u578B\u4FE1\u606F\u90FD\u6536\u96C6\u5B8C\u6BD5</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token punctuation">(</span>input<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> input <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> input <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
  <span class="token punctuation">}</span>

  <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>\u5728\u524D\u9762\u8BF4 never \u7C7B\u578B\u7684\u65F6\u5019\u5C31\u8BB2\u5230\u4E86\uFF0C \u5728\u7C7B\u578B\u63A7\u5236\u6D41\u5206\u6790\u4E0B, \u6BCF\u6D41\u8FC7\u4E00\u4E2A if \u5206\u652F\uFF0C \u540E\u7EED\u8054\u5408\u7C7B\u578B\u7684\u5206\u652F\u5C31\u5C11\u4E86\u4E00\u4E2A, \u56E0\u4E3A\u8FD9\u4E2A\u7C7B\u578B\u5DF2\u7ECF\u5728\u8FD9\u4E2A\u5206\u652F\u5904\u7406\u4E86\uFF0C \u4E0D\u4F1A\u8FDB\u5165\u4E0B\u4E00\u4E2A\u5206\u652F</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">const</span> strOrNumOrBool<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> strOrNumOrBool <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// string</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> strOrNumOrBool <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// number</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> strOrNumOrBool <span class="token operator">===</span> <span class="token string">&#39;boolean&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// boolean</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> _exitTypeCheck<span class="token operator">:</span> <span class="token builtin">never</span> <span class="token operator">=</span> strOrNumOrBool<span class="token punctuation">;</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;unknown type&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>\u5728\u8FD9\u91CC\uFF0C \u6211\u4EEC\u5B9E\u9645\u4E0A\u901A\u8FC7 if \u6761\u4EF6\u4E2D\u7684\u8868\u8FBE\u5F0F\u8FDB\u884C\u4E86\u7C7B\u578B\u4FDD\u62A4\uFF0C \u5373\u544A\u77E5\u4E86\u6D41\u8FC7\u8FD9\u91CC\u7684\u5206\u6790\u7A0B\u5E8F \u6BCF\u4E2A if \u5206\u652F\u4EE3\u7801\u5757\u4E2D\u662F\u4EC0\u4E48\u7C7B\u578B\u3002 \u8FD9\u5373\u662F\u7F16\u7A0B\u8BED\u8A00\u7684\u7C7B\u578B\u80FD\u529B\u4E2D\u6700\u91CD\u8981\u7684\u4E00\u90E8\u5206\uFF1A <strong>\u4E0E\u5B9E\u9645\u903B\u8F91\u7D27\u5BC6\u5173\u8054\u7684\u7C7B\u578B</strong>\u3002 \u6211\u4EEC\u4ECE\u903B\u8F91\u4E2D\u8FDB\u884C \u7C7B\u578B\u7684\u63A8\u5BFC, \u5728\u8FD4\u8FC7\u6765\u8BA9\u903B\u8F91\u4E3A\u7C7B\u578B\u4FDD\u9A7E\u62A4\u822A\u3002</p><p>\u524D\u9762\u8BF4\u8FC7\uFF0C \u7C7B\u578B\u63A7\u5236\u6D41\u5206\u6790\u5C31\u50CF\u4E00\u6761\u6CB3\u6D41\u4E00\u6837\u6D41\u8FC7\uFF0C\u90A3 if \u4E2D\u7684\u6761\u4EF6\u8868\u8FBE\u5F0F\u8981\u662F\u88AB\u63D0\u53D6\u51FA\u6765\u4E86\u600E\u4E48\u529E\uFF1F</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> isString <span class="token operator">=</span> <span class="token punctuation">(</span>input<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=&gt;</span> <span class="token keyword">typeof</span> input <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token punctuation">(</span>input<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isString</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    input <span class="token comment">// string | number \uFF08\u7C7B\u578B\u5E76\u6CA1\u6709\u88AB\u6536\u7A84\uFF09</span>

    <span class="token comment">// \u7C7B\u578B &#39;string | number&#39; \u4E0A\u4E0D\u5B58\u5728\u5C5E\u6027 charAt</span>
    input<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>\u5947\u602A\uFF0C \u6211\u4EEC\u53EA\u662F\u628A\u903B\u8F91\u63D0\u53D6\u5230\u4E86\u5916\u9762\u800C\u5DF2\uFF0C \u5982\u679C isString \u8FD4\u56DE\u4E86 true\uFF0C \u90A3 input \u4E5F\u4E00\u5B9A\u662F string \u4E86\u5440?</p><p>\u60F3\u8C61\u7C7B\u578B\u63A7\u5236\u6D41\u5206\u6790\u8FD9\u6761\u6CB3\u6D41\uFF0C \u521A\u6D41\u8FDB <code>if (isString(input))</code> \u5C31\u621B\u7136\u800C\u6B62\u4E86. \u56E0\u4E3A isString \u8FD9\u4E2A\u51FD\u6570\u5728 \u53E6\u5916\u4E00\u4E2A\u5730\u65B9\uFF0C \u5185\u90E8\u7684\u51FD\u6570\u5224\u65AD\u903B\u8F91\u5E76\u4E0D\u5728 foo \u4E2D\u3002 \u8FD9\u91CC\u7684\u7C7B\u578B\u63A7\u5236\u5206\u6790\u6D41\u505A\u4E0D\u5230\u8DE8\u51FD\u6570\u4E0A\u4E0B\u6587\u6765\u8FDB\u884C\u7C7B\u578B\u7684\u4FE1\u606F\u6536\u96C6 (\u4F46\u522B\u7684\u7C7B\u578B\u8BED\u8A00\u4E2D\u53EF\u80FD\u662F\u652F\u6301\u7684).</p><p>\u5B9E\u9645\u4E0A\uFF0C\u5C06\u5224\u65AD\u903B\u8F91\u5206\u79BB\u51FA\u6765\u63D0\u53D6\u5230\u5916\u90E8\u51FD\u6570\u4E2D\u8FDB\u884C\u590D\u7528\u662F\u975E\u5E38\u5E38\u89C1\u7684\u3002\u4E3A\u4E86\u89E3\u51B3\u8FD9\u4E00\u7C7B\u578B\u63A7\u5236\u6D41\u5206\u6790\u7684\u80FD\u529B\u4E0D\u8DB3\uFF0C typescript \u5F15\u5165\u4E86 <strong>is \u5173\u952E\u5B57</strong> \u6765\u663E\u793A\u7684\u63D0\u4F9B\u7C7B\u578B\u4FE1\u606F\u3002</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> isString <span class="token operator">=</span> <span class="token punctuation">(</span>input<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span><span class="token operator">:</span> input <span class="token keyword">is</span> <span class="token builtin">string</span> <span class="token operator">=&gt;</span> <span class="token keyword">typeof</span> input <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token punctuation">(</span>input<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isString</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    input <span class="token comment">// string  (input \u7C7B\u578B\u88AB\u6536\u7A84\u4E86)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    input <span class="token comment">// number</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>`,22),b=n("isString \u51FD\u6570\u88AB\u79F0\u4E3A\u7C7B\u578B\u5B88\u536B\uFF0C\u5728\u4ED6\u7684\u8FD4\u56DE\u503C\u4E2D\uFF0C \u6211\u4EEC\u4E0D\u518D\u4F7F\u7528 boolean \u4F5C\u4E3A\u7C7B\u578B\u6807\u6CE8\uFF0C\u800C\u662F\u4F7F\u7528\u4E86 "),m=n("input is string"),d=n(" \uFF0C \u8FD9\u4E2A\u5947\u602A\u7684\u642D\u914D\uFF0C\u62C6\u5F00\u6765\u770B\u5B83\u662F\u8FD9\u6837\u7684:"),y=a(`<ul><li>input: \u51FD\u6570\u4E2D\u7684\u67D0\u4E2A\u53C2\u6570</li><li><code>is string</code>: \u5373 <strong>is\u5173\u952E\u5B57 + \u9884\u671F\u7C7B\u578B</strong>, \u5982\u679C\u8FD9\u4E2A\u51FD\u6570\u8FD4\u56DE\u4E86 true\uFF0C \u90A3\u4E48 is \u5173\u952E\u5B57\u524D\u9762\u8FD9\u4E2A\u5165\u53C2\u7684\u7C7B\u578B\uFF0C \u5C31\u4F1A\u88AB<strong>\u8C03\u7528\u8FD9\u4E2A\u7C7B\u578B\u5B88\u536B\u7684\u8C03\u7528\u65B9 \u540E\u7EED\u7684\u7C7B\u578B\u63A7\u5236\u5206\u6790\u6D41\u6536\u96C6\u5230</strong>.</li></ul><p>\u9700\u8981\u6CE8\u610F\u7684\u662F\uFF0C \u7C7B\u578B\u5B88\u536B\u51FD\u6570\u4E2D\u5E76\u4E0D\u4F1A\u5BF9\u5224\u65AD\u7C7B\u578B\u548C\u5B9E\u9645\u7C7B\u578B\u7684\u5173\u8054\u505A\u68C0\u67E5:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> isString <span class="token operator">=</span> <span class="token punctuation">(</span>input<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span><span class="token operator">:</span> input <span class="token keyword">is</span> <span class="token builtin">number</span> <span class="token operator">=&gt;</span> <span class="token keyword">typeof</span> input <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token punctuation">(</span>input<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isString</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    input <span class="token comment">// \u8FD9\u91CC\u88AB\u63A8\u5BFC\u6210\u4E86 number\uFF0C \u7C7B\u578B\u5B88\u536B\u51FD\u6570\u4E0D\u4F1A\u68C0\u67E5\u5B9E\u9645\u903B\u8F91</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>\u4ECE\u8FD9\u4E2A\u89D2\u5EA6\u6765\u770B\uFF0C \u7C7B\u578B\u5B88\u536B <strong>\u6709\u4E9B\u7C7B\u4F3C\u4E8E \u7C7B\u578B\u65AD\u8A00, \u4F46\u7C7B\u578B\u5B88\u536B\u66F4\u5BBD\u677E\uFF0C \u4E5F\u66F4\u4FE1\u4EFB\u4F60\u4E00\u4E9B, \u4F60\u6307\u5B9A\u4EC0\u4E48\u7C7B\u578B\uFF0C \u5B83\u5C31\u662F\u4EC0\u4E48\u7C7B\u578B</strong>, \u9664\u4E86\u7B80\u5355\u5B9E\u7528\u539F\u59CB\u7C7B\u578B\u4EE5\u5916\uFF0C\u6211\u4EEC\u8FD8\u53EF\u4EE5\u5728\u7C7B\u578B\u5B88\u536B\u4E2D\u4F7F\u7528\u5BF9\u8C61\u7C7B\u578B\u3001\u8054\u5408\u7C7B\u578B\u7B49\u3002\u6BD4\u5982\u5F00\u53D1\u5E38\u7528\u7684\u4E24\u4E2A\u5B88\u536B:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Falsy</span> <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token operator">|</span> <span class="token string">&#39;&#39;</span> <span class="token operator">|</span> <span class="token number">0</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> isFalsy <span class="token operator">=</span> <span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span><span class="token operator">:</span> val <span class="token keyword">is</span> Falsy <span class="token operator">=&gt;</span> <span class="token operator">!</span>isFalsy<span class="token punctuation">;</span>

<span class="token comment">// \u4E0D\u5305\u62EC symbol\u3001 bigint</span>
<span class="token keyword">type</span> <span class="token class-name">Primitive</span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> isPrimitive <span class="token operator">=</span> <span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span><span class="token operator">:</span> val <span class="token keyword">is</span> Primitive <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token string">&#39;string&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;boolean&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>\u9664\u4E86 typeof \u4EE5\u5916\uFF0C \u6211\u4EEC\u8FD8\u53EF\u4EE5\u901A\u8FC7\u8BB8\u591A\u7C7B\u4F3C\u7684\u65B9\u5F0F\u8FDB\u884C\u7C7B\u578B\u4FDD\u62A4\uFF0C\u53EA\u8981\u5B83\u80FD\u5728\u8054\u5408\u7C7B\u578B\u7684\u7C7B\u578B\u6210\u5458\u4E2D\u8D77\u5230\u7B5B\u9009\u4F5C\u7528.</p><h2 id="\u7C7B\u578B\u65AD\u8A00\u5B88\u536B" tabindex="-1"><a class="header-anchor" href="#\u7C7B\u578B\u65AD\u8A00\u5B88\u536B" aria-hidden="true">#</a> \u7C7B\u578B\u65AD\u8A00\u5B88\u536B</h2><p>\u9664\u4E86\u4F7F\u7528 is \u5173\u952E\u5B57\u7684\u7C7B\u578B\u5B88\u536B\u4EE5\u5916\uFF0C \u5176\u5B9E\u8FD8\u5B58\u5728\u4F7F\u7528 <code>asserts</code> \u5173\u952E\u5B57\u7684\u7C7B\u578B\u65AD\u8A00\u5B88\u536B, \u5982\u679C\u4F60\u4F7F\u7528\u8FC7\u6D4B\u8BD5\u7528\u4F8B\u6216\u8005 nodejs \u7684 assert \u6A21\u5757\uFF0C \u90A3\u5BF9\u65AD\u8A00\u8FD9\u4E2A\u6982\u5FF5\u5E94\u8BE5\u4E0D\u964C\u751F:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> assert <span class="token keyword">from</span> <span class="token string">&#39;assert&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> name<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token string">&#39;cqc&#39;</span><span class="token punctuation">;</span>

<span class="token function">assert</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> name <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// number \u7C7B\u578B</span>
name<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u7F16\u8BD1\u6B63\u5E38\uFF0C \u8FD0\u884C\u65F6\u5019\u62A5\u9519</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>\u4E0A\u9762\u8FD9\u6BB5\u4EE3\u7801\u5728\u8FD0\u884C\u65F6\u5019\u4F1A\u629B\u51FA\u9519\u8BEF\uFF0C\u56E0\u4E3A assert \u63A5\u53D7\u5230\u7684\u8868\u8FBE\u5F0F\u7684\u6267\u884C\u7ED3\u679C\u662F false\u3002 \u8FD9\u5176\u5B9E\u4E5F\u7C7B\u4F3C\u7C7B\u578B\u5B88\u536B\u7684\u573A\u666F: \u5982\u679C\u65AD\u8A00<strong>\u4E0D\u6210\u7ACB</strong>\uFF0C \u6BD4\u5982\u8FD9\u91CC\u610F\u5473\u7740\u503C\u4E0D\u4E3A number\uFF0C \u90A3\u4E48\u65AD\u8A00\u4E0B\u65B9\u7684\u4EE3\u7801\u5C31\u6267\u884C\u4E0D\u5230\uFF08dead code\uFF09, \u5982\u679C\u65AD\u8A00\u901A\u8FC7\u4E86\uFF0C \u4E0D\u7BA1\u6700\u5F00\u59CB\u662F\u4EC0\u4E48\u7C7B\u578B\uFF0C \u65AD\u8A00\u8FC7\u7684\u4EE3\u7801\u4E2D\u7684\u7C7B\u578B<strong>\u4E00\u5B9A\u662F\u7B26\u5408\u65AD\u8A00\u7684\u7C7B\u578B</strong>, \u6BD4\u5982\u5728\u8FD9\u91CC\u5C31\u662F number.</p><p>\u4F46<strong>\u65AD\u8A00\u5B88\u536B\u548C\u7C7B\u578B\u5B88\u536B\u6700\u4E0D\u540C\u7684\u5728\u4E8E\uFF1A \u5728\u5224\u65AD\u6761\u4EF6\u4E0D\u901A\u8FC7\u65F6\u5019\uFF0C \u65AD\u8A00\u5B88\u536B\u9700\u8981\u629B\u51FA\u4E00\u4E2A\u9519\u8BEF</strong>, <strong>\u7C7B\u578B\u5B88\u536B\u53EA\u9700\u8981\u5254\u9664\u9884\u671F\u7684\u7C7B\u578B</strong>\u3002 \u8FD9\u91CC\u629B\u51FA\u7684\u9519\u8BEF\u53EF\u80FD\u8BA9\u4F60\u60F3\u5230\u4E86 never \u7C7B\u578B\uFF0C\u4F46\u5B9E\u9645\u4E0A\u60C5\u51B5\u8981 \u590D\u6742\u4E00\u4E9B\uFF0C \u65AD\u8A00\u5B88\u536B\u5E76\u4E0D\u4F1A\u59CB\u7EC8\u90FD\u629B\u51FA\u9519\u8BEF\uFF0C\u6240\u4EE5\u4ED6\u7684\u8FD4\u56DE\u503C\u4E0D\u80FD\u7B80\u5355\u70B9\u4F7F\u7528 never\uFF0C\u4E3A\u6B64\uFF0C typescript 3.7 \u7248\u672C\u4E13\u95E8\u5F15\u5165\u4E86 asserts \u5173\u952E\u5B57 \u6765\u8FDB\u884C\u65AD\u8A00\u573A\u666F\u4E0B\u7684\u7C7B\u578B\u5B88\u536B, \u6BD4\u5982\u524D\u9762\u7684 assert \u65B9\u6CD5\u7684\u7B7E\u540D\u53EF\u4EE5\u662F\u8FD9\u6837\u7684\uFF1A</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>  <span class="token comment">// \u53EA\u80FD\u4F7F\u7528\u6807\u51C6\u51FD\u6570\u5199\u6CD5\uFF0C \u4E0D\u7136\u4F7F\u7528\u65F6\u5019\u62A5\u9519\uFF08why\uFF1F\uFF09</span>
  <span class="token comment">// const assert = (condition: any, message: string): asserts condition =&gt; {</span>
  <span class="token comment">//   if (!condition) {</span>
  <span class="token comment">//     throw new Error(message)</span>
  <span class="token comment">//   }</span>
  <span class="token comment">// }</span>

  <span class="token keyword">function</span> <span class="token function">assert</span><span class="token punctuation">(</span>condition<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">asserts</span> condition <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>


  <span class="token keyword">const</span> <span class="token function-variable function">handler</span> <span class="token operator">=</span> <span class="token punctuation">(</span>input<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">assert</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> input <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    input<span class="token punctuation">;</span> <span class="token comment">// string</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div>`,12),g=n("\u8FD9\u91CC\u4F7F\u7528 "),f=n("asserts condition"),w=n(" , \u800C condition \u6765\u81EA\u4E8E\u5B9E\u9645\u903B\u8F91! \u8FD9\u4E5F\u610F\u5473\u7740\uFF0C \u6211\u4EEC\u5C06 "),v=s("strong",null,"condition \u8FD9\u4E00\u903B\u8F91\u5C42\u9762\u7684\u4EE3\u7801\uFF0C \u4F5C\u4E3A\u4E86\u7C7B\u578B\u5C42\u9762\u7684\u5224\u65AD\u4F9D\u636E",-1),h=n(". \u76F8\u5F53\u4E8E\u5728\u8FD4\u56DE\u503C\u7C7B\u578B\u4E2D\u4F7F\u7528\u4E86 \u4E00\u4E2A\u903B\u8F91\u8868\u8FBE\u5F0F\u8FDB\u884C\u4E86\u7C7B\u578B\u6807\u6CE8\u3002"),_=a(`<p>\u4E3E\u4F8B\u6765\u8BF4\uFF0C \u5BF9\u4E8E <code>assert(typeof input === &#39;string&#39;)</code> \u8FD9\u4E48\u4E00\u4E2A\u65AD\u8A00, \u5982\u679C\u51FD\u6570\u6210\u529F\u8FD4\u56DE\uFF0C\u8BF4\u660E\u5176 \u540E\u7EED\u4EE3\u7801\u4E2D condition \u5747\u6210\u7ACB\uFF0C\u4E5F\u5C31\u662F input \u795E\u5947\u5730\u53D8\u4E3A\u4E86 string \u8FD9\u4E00\u7C7B\u578B\u3002</p><p>\u8FD9\u91CC\u7684condition \u751A\u81F3\u53EF\u4EE5\u7ED3\u5408 is \u5173\u952E\u5B57\u8FDB\u4E00\u6B65\u63D0\u4F9B\u7C7B\u578B\u5B88\u536B\u80FD\u529B\uFF1A</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// \u7528 const assert = xxx \u65E0\u6548, \u4F1A\u62A5\u9519</span>
<span class="token keyword">function</span> <span class="token function">assert</span><span class="token punctuation">(</span>input<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">asserts</span> input <span class="token keyword">is</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> input <span class="token operator">!==</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;input is not a string!&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">handler</span> <span class="token operator">=</span> <span class="token punctuation">(</span>input<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">assert</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>

  input<span class="token punctuation">;</span> <span class="token comment">// string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>\u5728\u4E0A\u9762\u8FD9\u79CD\u60C5\u51B5\u4E0B\uFF0C \u4F60\u65E0\u9700\u518D\u4E3A\u65AD\u8A00\u5B88\u536B\u4F20\u5165\u4E00\u4E2A\u8868\u8FBE\u5F0F, \u800C\u662F\u5C06\u8FD9\u4E2A\u5224\u65AD\u7528\u7684\u8868\u8FBE\u5F0F\u653E\u5165\u65AD\u8A00\u5B88\u536B\u5185\u90E8\uFF0C \u6765\u83B7\u53D6\u66F4\u72EC\u7ACB\u7684\u4EE3\u7801\u903B\u8F91\u3002</p><h2 id="\u57FA\u4E8E-in-\u4E0E-instanceof-\u7684\u7C7B\u578B\u4FDD\u62A4" tabindex="-1"><a class="header-anchor" href="#\u57FA\u4E8E-in-\u4E0E-instanceof-\u7684\u7C7B\u578B\u4FDD\u62A4" aria-hidden="true">#</a> \u57FA\u4E8E in \u4E0E instanceof \u7684\u7C7B\u578B\u4FDD\u62A4</h2><p><code>in</code> \u64CD\u4F5C\u7B26\u5E76\u4E0D\u662F typescript \u4E2D\u65B0\u589E\u7684\u6982\u5FF5\uFF0C \u800C\u662F javascript \u4E2D\u5DF2\u6709\u7684\u90E8\u5206\uFF0C\u4ED6\u53EF\u4EE5\u901A\u8FC7 <code>key in object</code> \u7684\u65B9\u5F0F\u6765\u5224\u65AD key \u662F\u5426\u5B58\u5728 object \u6216\u5176\u539F\u578B\u94FE\u4E0A.</p><p>\u65E2\u7136\u53EF\u4EE5\u8D77\u5230\u533A\u5206\u4F5C\u7528\uFF0C \u5728 typescript \u4E2D\u81EA\u7136\u53EF\u4EE5\u901A\u8FC7\u5B83\u6765\u8FDB\u884C\u7C7B\u578B\u4FDD\u62A4\u3002</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
  foo<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  fooOnly<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  shared<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Bar</span> <span class="token punctuation">{</span>
  bar<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  barOnly<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  shared<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">handler</span> <span class="token operator">=</span> <span class="token punctuation">(</span>input<span class="token operator">:</span> Foo <span class="token operator">|</span> Bar<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span> <span class="token keyword">in</span> input<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    input<span class="token punctuation">;</span> <span class="token comment">// Foo  (\u81EA\u52A8\u63A8\u5BFC\u7C7B\u578B)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    input<span class="token punctuation">;</span> <span class="token comment">// Bar</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>\u8FD9\u91CC foo / bar, fooOnly / barOnly, shared \u5C5E\u6027\u4EEC\u90FD\u6709\u7740\u4E0D\u540C\u610F\u4E49\uFF0C\u6211\u4EEC\u53EF\u4EE5\u4F7F\u7528\u8054\u5408\u7C7B\u578B\u7684\u67D0\u4E2A\u7C7B\u578B\u6210\u5458\u4E2D\u72EC\u6709(\u5177\u6709\u8FA8\u8BC6\u5EA6)\u7684\u5C5E\u6027\u6765 \u533A\u5206 input \u7684\u8054\u5408\u7C7B\u578B\u3002 \u4F46\u662F\uFF0C \u5982\u679C\u7528\u4E0D\u5177\u6709\u8FA8\u8BC6\u5EA6\u7684\u5C5E\u6027\u6765\u5224\u65AD\u7684\u8BDD\uFF0C \u90A3\u4E48 \u4E0A\u9762\u7684\u4F8B\u5B50\u4E2D\uFF0C if \u5185\u88AB\u63A8\u5BFC\u7684\u7C7B\u578B\u4ECD\u7136\u662F<code>Foo | Bar</code>, else \u4E2D\u5219\u662F <code>never</code>\u3002</p><p>\u8FD9\u4E2A\u53EF\u8FA8\u8BC6\u5C5E\u6027\u53EF\u4EE5\u662F\u7ED3\u6784\u5C42\u9762\u7684, \u6BD4\u5982\u7ED3\u6784 A \u7684 prop \u662F\u6570\u7EC4\uFF0C \u7ED3\u6784 B \u7684 prop \u662F\u5BF9\u8C61, \u6216\u8005\u7ED3\u6784 A \u5B58\u5728 prop \u5C5E\u6027\uFF0C \u7ED3\u6784 B \u4E0D\u5B58\u5728\u3002</p><p>\u5B83\u751A\u81F3\u53EF\u4EE5\u662F\u540C\u5C5E\u6027\u4F46\u5B57\u9762\u91CF\u4E0D\u540C\u7684\u5DEE\u5F02\uFF1A</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
  kind<span class="token operator">:</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">;</span>
  fooOnly<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  diffKey<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Bar</span> <span class="token punctuation">{</span>
  kind<span class="token operator">:</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">;</span>
  barOnly<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  diffKey<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">const</span> <span class="token function-variable function">handler</span> <span class="token operator">=</span> <span class="token punctuation">(</span>input<span class="token operator">:</span> Foo <span class="token operator">|</span> Bar<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token punctuation">.</span>kind <span class="token operator">===</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    input<span class="token punctuation">;</span> <span class="token comment">// Foo</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> input<span class="token punctuation">.</span>diffKey <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    input<span class="token punctuation">;</span> <span class="token comment">// Foo | Bar (\u4F7F\u7528 typeof \u4E0D\u8D77\u4F5C\u7528 \u65E0\u6CD5\u533A\u5206)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>\u5982\u4E0A\u9762\u7684\u4F8B\u5B50\uFF0C \u5BF9\u4E8E\u540C\u540D\u4E0D\u540C\u503C\u7684\u5C5E\u6027\uFF0C \u9700\u8981\u4F7F\u7528\u5B57\u9762\u91CF\u7C7B\u578B\u624D\u80FD\u81EA\u52A8\u63A8\u5BFC\u6B63\u786E\u7684\u5C5E\u6027\uFF08\u4E0D\u80FD\u4F7F\u7528 typeof \u533A\u5206\uFF09</p><p>\u9664\u6B64\u4E4B\u5916\uFF0C javascript \u8FD8\u5B58\u5728\u4E00\u4E2A \u529F\u80FD\u7C7B\u4F3C\u4E8E typeof\u3001in \u7684\u64CD\u4F5C\u7B26\uFF1A <code>instanceof</code>, \u5B83\u5224\u65AD\u7684\u662F\u539F\u578B\u7EA7\u522B\u7684\u4E1C\u897F\uFF0C \u5982 <code>foo instanceof Base</code> \u4F1A \u6CBF\u7740 foo \u7684\u539F\u578B\u94FE\u6765\u67E5\u627E <code>Base.prototype</code> \u662F\u5426\u5B58\u5728\u5176\u4E0A. \u5F53\u7136\uFF0C\u5728 es6 \u65E0\u5904\u4E0D\u5728 \u7684\u4ECA\u5929\uFF0C \u6211\u4EEC\u53EF\u4EE5\u7B80\u5355\u7684\u8BA4\u4E3A\u8FD9\u662F\u5224\u65AD foo \u662F\u5426\u662F Base \u7C7B\u7684\u5B9E\u4F8B. \u540C\u6837\u7684 instanceof \u53EF\u4EE5\u8FDB\u884C\u7C7B\u578B\u4FDD\u62A4\uFF1A</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">FooBase</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">BarBase</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token keyword">extends</span> <span class="token class-name">FooBase</span> <span class="token punctuation">{</span>
  <span class="token function">fooOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Bar</span> <span class="token keyword">extends</span> <span class="token class-name">BarBase</span> <span class="token punctuation">{</span>
  <span class="token function">barOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">handler</span> <span class="token operator">=</span> <span class="token punctuation">(</span>input<span class="token operator">:</span> Foo <span class="token operator">|</span> Bar<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>input <span class="token keyword">instanceof</span> <span class="token class-name">Foo</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    input<span class="token punctuation">;</span> <span class="token comment">// Foo</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    input<span class="token punctuation">;</span> <span class="token comment">// Bar</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h2 id="\u6269\u5C55" tabindex="-1"><a class="header-anchor" href="#\u6269\u5C55" aria-hidden="true">#</a> \u6269\u5C55</h2><h3 id="\u63A5\u53E3\u7684\u5408\u5E76" tabindex="-1"><a class="header-anchor" href="#\u63A5\u53E3\u7684\u5408\u5E76" aria-hidden="true">#</a> \u63A5\u53E3\u7684\u5408\u5E76</h3><p>\u5728\u5C06\u4EA4\u53C9\u7C7B\u578B\u7684\u65F6\u5019\uFF0C \u4F60\u53EF\u80FD\u6CE8\u610F\u5230\u4E86, \u63A5\u53E3\u548C\u7C7B\u578B\u522B\u540D\u90FD\u80FD\u76F4\u63A5\u4F7F\u7528\u4EA4\u53C9\u7C7B\u578B <code>&amp;</code>, \u4F46\u9664\u6B64\u4E4B\u5916\uFF0C \u63A5\u53E3\u8FD8\u80FD\u4F7F\u7528 \u7EE7\u627F \u8FDB\u884C\u5408\u5E76\uFF0C\u5728\u7EE7\u627F\u65F6\u5019 \u5B50\u63A5\u53E3\u53EF\u4EE5\u58F0\u660E\u540C\u540D\u7C7B\u578B\uFF0C \u4F46\u4E0D\u80FD\u8986\u76D6\u7236\u63A5\u53E3\u4E2D\u7684\u6B64\u5C5E\u6027\uFF0C <strong>\u5B50\u63A5\u53E3\u4E2D\u7684\u7C7B\u578B\u9700\u8981\u80FD\u517C\u5BB9(extends)\u7236\u63A5\u53E3\u4E2D\u7684\u7C7B\u578B</strong>\u3002</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Foo1</span> <span class="token punctuation">{</span>
  info<span class="token operator">:</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  onlyFoo1<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Foo2 \u4E2D\u5305\u62EC\u4E86 Foo1 \u4E2D\u7684\u6240\u6709\u58F0\u660E</span>
<span class="token keyword">interface</span> <span class="token class-name">Foo2</span> <span class="token keyword">extends</span> <span class="token class-name">Foo1</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u58F0\u660E\u540C\u540D\u5C5E\u6027\u9700\u8981\u517C\u5BB9\u7236</span>
  info<span class="token operator">:</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment">// \u62D3\u5C55\u65B0\u5C5E\u6027</span>
  onlyFoo2<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>

  <span class="token comment">// \u62A5\u9519\uFF0C \u4E0D\u80FD\u5C06 number \u5206\u914D\u7ED9 boolean</span>
  onlyFoo1<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token comment">// \u4EA4\u53C9\u7C7B\u578B \u4F1A\u5408\u5E76\u5C5E\u6027</span>
<span class="token doc-comment comment">/**
 * Foo3 = <span class="token punctuation">{</span>
 *  info: <span class="token punctuation">{</span> age: number; name: string; <span class="token punctuation">}</span>;
 *  onlyFoo1: boolean;
 * <span class="token punctuation">}</span>
 */</span>
<span class="token keyword">type</span> <span class="token class-name">Foo3</span> <span class="token operator">=</span> Foo1 <span class="token operator">&amp;</span> <span class="token punctuation">{</span>
  info<span class="token operator">:</span> <span class="token punctuation">{</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><p>\u8FD9\u4E5F\u662F\u63A5\u53E3 \u548C\u7C7B\u578B\u522B\u540D\u7684\u91CD\u8981\u5DEE\u5F02\u4E4B\u4E00 \uFF08extends\uFF09.</p><p>\u5982\u679C\u662F\u63A5\u53E3 \u548C \u7C7B\u578B\u522B\u540D\u4E4B\u95F4\u7684\u5408\u5E76\u5462\uFF1F \u5176\u5B9E\u89C4\u5219\u662F\u4E00\u6837\u7684\u3002</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Base</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">IDerived</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>

  <span class="token comment">// error  \u4E0D\u80FD \u5C06 number \u5206\u914D\u7ED9 string</span>
  name<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">interface</span> <span class="token class-name">IBase</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">type</span> <span class="token class-name">Derived</span> <span class="token operator">=</span> IBase <span class="token operator">&amp;</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Derived:</span>
<span class="token comment">// {</span>
<span class="token comment">//   name: never;</span>
<span class="token comment">//   age: number;</span>
<span class="token comment">// }</span>

</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h3 id="\u66F4\u5F3A\u5927\u7684\u53EF\u8FA8\u8BC6\u8054\u5408\u7C7B\u578B\u5206\u6790" tabindex="-1"><a class="header-anchor" href="#\u66F4\u5F3A\u5927\u7684\u53EF\u8FA8\u8BC6\u8054\u5408\u7C7B\u578B\u5206\u6790" aria-hidden="true">#</a> \u66F4\u5F3A\u5927\u7684\u53EF\u8FA8\u8BC6\u8054\u5408\u7C7B\u578B\u5206\u6790</h3><p>\u7C7B\u578B\u63A7\u5236\u6D41\u5206\u6790\u5176\u5B9E\u662F\u5728\u4E0D\u505C\u589E\u5F3A\u7684\uFF0C\u6BD4\u5982\u4E0B\u9762\u7684\u4F8B\u5B50\u5728 4.6 \u4EE5\u524D\u7248\u672C\u4E2D\u662F\u62A5\u9519\u7684\uFF1A</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Args</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">Func</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> Args<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> func<span class="token operator">:</span> <span class="token function-variable function">Func</span> <span class="token operator">=</span> <span class="token punctuation">(</span>kind<span class="token punctuation">,</span> payload<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>kind <span class="token operator">===</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    payload<span class="token punctuation">;</span> <span class="token comment">// 4.6 \u4EE5\u524D\u662F string | number, 4.6\u4EE5\u540E\u5C31\u662F string;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>`,25);function x(F,B){const p=c("aMark");return l(),r(i,null,[k,s("p",null,[b,e(p,null,{default:t(()=>[m]),_:1}),d]),y,s("p",null,[g,e(p,null,{default:t(()=>[f]),_:1}),w,v,h]),_],64)}var S=o(u,[["render",x],["__file","g.\u7C7B\u578B\u5DE5\u5177(part 2).html.vue"]]);export{S as default};
